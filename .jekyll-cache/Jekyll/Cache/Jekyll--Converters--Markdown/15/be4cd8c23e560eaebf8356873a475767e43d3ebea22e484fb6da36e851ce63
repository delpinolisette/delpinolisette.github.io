I"x<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>

<p>The Binomial Distribution, in simplest terms, describes the probabilities of getting $x$ successes in $n$ trials.</p>

<p>For example, what is the probability of getting \(4\) heads if i flip a <em>fair</em> coin \(6\) times? Also, what is the probability of getting \(4\) heads if I flip an <em>unfair</em> coin \(6\) times? These questions can be answered with the Binomial Distribution!</p>

<p>Notice that the Binomial distribution is a <strong>discrete</strong> distribution. That means that for any expected values of the parent distribution, you should evaluate using sums, not integrals.</p>

<p>The Binomial Distribution is also called a Bernoulli Distribution, since a single Bernoulli trial measures the probability of binary success in a single trial.</p>

<p>In this post I show two ways that I implement the Binomial Distribution, even though in practice you should use the one that relies on <code class="language-plaintext highlighter-rouge">scipy</code>, especially in professional settings.</p>

<p>Recall that the formula for the Binomial Distribution is …</p>

\[P_x = {n \choose x} p^{x} (1-p)^{n-x}\]

<p>But since \({n \choose x} = \frac{n!}{x! (n-x)!}\)</p>

<p>We also have :
\(P_x = {\frac{n!}{x! (n-x)!}} p^{x} (1-p)^{n-x}\)</p>

<h2 id="method-1---implement-the-formula-from-scratch">Method 1 - Implement the formula from scratch</h2>

<p>the pseudocode for an implementation like this is :</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># a recursive factorial defn. 
</span><span class="k">def</span> <span class="nf">factorial</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
  <span class="k">if</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
    <span class="k">return</span> <span class="n">x</span><span class="o">*</span><span class="n">factorial</span><span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
  <span class="k">else</span><span class="p">:</span>
    <span class="k">return</span> <span class="mi">1</span>

<span class="c1"># returns n choose x
</span><span class="k">def</span> <span class="nf">choose</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">x</span><span class="p">):</span>
  <span class="k">return</span> <span class="n">factorial</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="n">factorial</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">*</span><span class="n">factorial</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="n">x</span><span class="p">))</span>

<span class="c1"># returns binomial PMF
</span><span class="k">def</span> <span class="nf">binomial_pdf</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">x</span><span class="p">,</span><span class="n">p</span><span class="p">):</span>
  <span class="n">n_choose_x</span> <span class="o">=</span> <span class="n">choose</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">x</span><span class="p">)</span>

  <span class="k">return</span> <span class="n">n_choose_x</span> <span class="o">*</span> <span class="p">(</span><span class="n">p</span><span class="o">**</span><span class="n">x</span><span class="p">)</span> <span class="o">*</span> <span class="p">((</span><span class="mi">1</span><span class="o">-</span><span class="n">p</span><span class="p">)</span><span class="o">**</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="n">x</span><span class="p">))</span>

</code></pre></div></div>

<h2 id="method-2">Method 2</h2>

<p>This one is probably better form after you’ve tried implementing the binomial distribution from scratch.</p>

<p>This is the method for a non-cumulative distribution, functions documented <a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.binom.html">here</a>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">scipy.stats</span> <span class="kn">import</span> <span class="n">binom</span>

<span class="k">def</span> <span class="nf">pb</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">n</span><span class="p">,</span><span class="n">p</span><span class="p">):</span>
  <span class="k">return</span> <span class="n">binom</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">p</span><span class="p">)</span>

</code></pre></div></div>
<p>And this is the method for a cumulative binomial distribution :</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>
:ET